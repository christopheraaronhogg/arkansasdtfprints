<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Direct-To-Film Print Orders</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-print"></i> Direct-To-Film Print Orders</h1>
            <p class="subtitle">Upload your PNG files for instant pricing</p>
        </header>

        <main>
            <form action="upload.php" method="post" enctype="multipart/form-data" id="uploadForm" onsubmit="return prepareFormData(event)">
                <div class="upload-section">
                    <div class="upload-area" id="dropZone">
                        <i class="fas fa-cloud-upload-alt"></i>
                        <p class="upload-title">Drag & drop your PNG files here</p>
                        <p class="upload-subtitle">or</p>
                        <label class="upload-btn">
                            <i class="fas fa-folder-open"></i>
                            Choose Files
                            <input type="file" name="images[]" accept="image/png" multiple required id="fileInput">
                        </label>
                    </div>
                    <div id="fileList" class="file-list"></div>
                </div>

                <div id="images-container" class="images-grid"></div>

                <div class="order-submit-section">
                    <div class="email-input">
                        <i class="fas fa-envelope"></i>
                        <input type="email" id="email" name="email" required 
                               placeholder="Enter your email">
                    </div>
                    <div class="total-display" id="totalCost">Total: $0.00</div>
                    <button type="submit" class="submit-btn">
                        <i class="fas fa-paper-plane"></i>
                        Submit
                    </button>
                </div>
            </form>
        </main>
    </div>

    <div id="previewModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <div class="modal-image-container">
                <img id="modalImage" class="modal-image">
            </div>
        </div>
    </div>

    <script>
        // STATE & CORE LOGIC ==============================================
        const PrintCalculator = (() => {
            const state = {
                images: new Map(),
                basePrice: 0.02, // price per square inch
            };

            function calculateCost(width, height, quantity = 1) {
                const roundedWidth = Math.round(width);
                const roundedHeight = Math.round(height);
                const area = roundedWidth * roundedHeight;
                return area * state.basePrice * quantity;
            }

            function pixelsToInches(pixels) {
                return (pixels / 300).toFixed(2);
            }

            return {
                addImage(file, img) {
                    const id = crypto.randomUUID();
                    const DPI = 300;
                    const maxWidth = 24 * DPI;
                    const maxHeight = 24 * DPI;
                    const scale = Math.min(maxWidth / img.naturalWidth, maxHeight / img.naturalHeight, 1);
                    const finalWidth = (img.naturalWidth * scale) / DPI;
                    const finalHeight = (img.naturalHeight * scale) / DPI;

                    state.images.set(id, {
                        file,
                        original: {
                            width: finalWidth,
                            height: finalHeight,
                            aspect: finalWidth / finalHeight
                        },
                        current: {
                            width: finalWidth,
                            height: finalHeight
                        },
                        quantity: 1,
                        get cost() {
                            return calculateCost(
                                Math.round(this.current.width),
                                Math.round(this.current.height), 
                                this.quantity
                            );
                        }
                    });

                    return id;
                },

                updateDimension(id, dimension, value) {
                    const imageState = state.images.get(id);
                    if (!imageState) return;

                    const newValue = parseFloat(value);
                    if (isNaN(newValue)) return;

                    // Update the specified dimension
                    imageState.current[dimension] = parseFloat(newValue.toFixed(2));

                    // Update the other dimension to maintain aspect ratio
                    const otherDimension = dimension === 'width' ? 'height' : 'width';
                    const otherValue = newValue / imageState.original.aspect;
                    imageState.current[otherDimension] = parseFloat(otherValue.toFixed(2));
                },

                updateQuantity(id, quantity) {
                    const imageState = state.images.get(id);
                    if (!imageState) return;

                    imageState.quantity = parseInt(quantity) || 1;
                },

                getImageState(id) {
                    return state.images.get(id);
                },

                getImageCost(id) {
                    const imageState = state.images.get(id);
                    return imageState.cost;
                },

                getTotalCost() {
                    let total = 0;
                    state.images.forEach(img => {
                        total += img.cost;
                    });
                    return total;
                }
            };
        })();

        // UI MANAGEMENT ===============================================
        const PrintUI = {
            init() {
                this.imagesContainer = document.getElementById('images-container');
                this.totalDisplay = document.getElementById('totalCost');
                this.setupEventListeners();
            },

            setupEventListeners() {
                const dropZone = document.getElementById('dropZone');
                const fileInput = document.getElementById('fileInput');

                dropZone.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    dropZone.classList.add('dragover');
                });

                dropZone.addEventListener('dragleave', () => {
                    dropZone.classList.remove('dragover');
                });

                dropZone.addEventListener('drop', async (e) => {
                    e.preventDefault();
                    dropZone.classList.remove('dragover');

                    const files = [...e.dataTransfer.files].filter(f => f.type === 'image/png');
                    await this.handleFiles(files);
                });

                fileInput.addEventListener('change', async () => {
                    const files = [...fileInput.files].filter(f => f.type === 'image/png');
                    await this.handleFiles(files);
                });

                this.imagesContainer.addEventListener('input', (e) => {
                    const input = e.target;
                    if (input.classList.contains('width-input') || input.classList.contains('height-input')) {
                        this.handleDimensionInput(input);
                    } else if (input.classList.contains('quantity-input')) {
                        this.handleQuantityInput(input);
                    }
                });
            },

            loadImage(file) {
                return new Promise((resolve, reject) => {
                    const img = new Image();
                    img.onload = () => resolve(img);
                    img.onerror = reject;
                    img.src = URL.createObjectURL(file);
                });
            },

            async handleFiles(files) {
                for (const file of files) {
                    try {
                        const img = await this.loadImage(file);
                        const id = PrintCalculator.addImage(file, img);
                        this.renderImagePreview(id, img);
                        this.updateTotalDisplay();
                    } catch (error) {
                        console.error('Error processing image:', error);
                    }
                }
            },

            handleDimensionInput(input) {
                const container = input.closest('.size-inputs');
                const id = container.dataset.imageId;
                const dimension = input.classList.contains('width-input') ? 'width' : 'height';
                
                PrintCalculator.updateDimension(id, dimension, input.value);
                const imageState = PrintCalculator.getImageState(id);

                // Update linked dimension input
                const otherDimension = dimension === 'width' ? 'height' : 'width';
                const otherInput = container.querySelector(
                    `.${otherDimension}-input`
                );
                otherInput.value = imageState.current[otherDimension].toFixed(2);

                // Update costs
                this.updateCostDisplay(id);
                this.updateTotalDisplay();
            },

            handleQuantityInput(input) {
                const container = input.closest('.size-inputs');
                const id = container.dataset.imageId;
                PrintCalculator.updateQuantity(id, input.value);
                this.updateCostDisplay(id);
                this.updateTotalDisplay();
            },

            updateCostDisplay(id) {
                const container = document.querySelector(`[data-image-id="${id}"]`);
                const costValue = container.querySelector('.cost-value');
                if (costValue) {
                    costValue.textContent = `$${PrintCalculator.getImageCost(id).toFixed(2)}`;
                }
            },

            renderImagePreview(id, img) {
                const container = document.createElement('div');
                container.className = 'size-inputs';
                container.dataset.imageId = id;

                const imageState = PrintCalculator.getImageState(id);

                container.innerHTML = `
                    <div class="preview-content">
                        <div class="preview-section">
                            <img src="${img.src}" class="preview-image" alt="Preview">
                        </div>
                        <div class="controls-section">
                            <div class="input-with-unit">
                                <label>Width</label>
                                <input type="number" 
                                       value="${imageState.current.width.toFixed(2)}" 
                                       step="0.01" 
                                       min="0.1" 
                                       class="width-input">
                                <span class="unit">in</span>
                            </div>
                            <div class="input-with-unit">
                                <label>Height</label>
                                <input type="number" 
                                       value="${imageState.current.height.toFixed(2)}" 
                                       step="0.01" 
                                       min="0.1" 
                                       class="height-input">
                                <span class="unit">in</span>
                            </div>
                            <div class="input-with-unit">
                                <label>Qty</label>
                                <input type="number" 
                                       value="${imageState.quantity}" 
                                       min="1" 
                                       step="1" 
                                       class="quantity-input">
                            </div>
                        </div>
                    </div>
                    <div class="cost-display">
                        <span>Cost: </span>
                        <span class="cost-value">$${imageState.cost.toFixed(2)}</span>
                    </div>`;

                this.imagesContainer.appendChild(container);

                // Add click handler to preview images
                container.querySelector('.preview-image').addEventListener('click', () => this.showFullSizePreview(img.src));
            },

            showFullSizePreview(src) {
                const modal = document.getElementById('previewModal');
                const modalImg = document.getElementById('modalImage');
                modalImg.src = src;
                modal.style.display = 'flex';

                // Close modal handlers
                modal.querySelector('.close-modal').onclick = () => {
                    modal.style.display = 'none';
                };

                modal.onclick = (e) => {
                    if (e.target === modal) {
                        modal.style.display = 'none';
                    }
                };
            },

            updateTotalDisplay() {
                this.totalDisplay.textContent = 
                    `Total: $${PrintCalculator.getTotalCost().toFixed(2)}`;
            }
        };

        // Initialize the application
        document.addEventListener('DOMContentLoaded', () => PrintUI.init());
    </script>
</body>
</html>


<script>
function prepareFormData(event) {
    const form = event.target;
    const formData = new FormData(form);
    const orderDetails = [];
    
    // Add all image details
    document.querySelectorAll('.size-inputs').forEach((container) => {
        const id = container.dataset.imageId;
        const imageState = PrintCalculator.getImageState(id);
        if (imageState) {
            orderDetails.push({
                width: imageState.current.width,
                height: imageState.current.height,
                quantity: imageState.quantity,
                cost: imageState.cost
            });
        }
    });
    
    formData.append('orderDetails', JSON.stringify(orderDetails));
    formData.append('totalCost', PrintCalculator.getTotalCost());
    
    return true;
}
</script>
